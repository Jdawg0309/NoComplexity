import os
import streamlit as st
import tkinter as tk
from tkinter import filedialog
from backend.upgrade_project import read_code, upgrade_code, write_code
from backend.autocoder_enhancer import enhance_enhancer
from dotenv import load_dotenv
import time
import json
import hashlib
from memory.logger import log_memory, get_edit_history
from memory.database import init_db, save_project_snapshot, get_project_history
from utils.file_utils import scan_project_directory, format_directory_tree

# Load environment variables
load_dotenv()

# Initialize database
init_db()

def set_page_settings():
    st.set_page_config(
        page_title="AI Coding Assistant", 
        layout="wide",
        page_icon="ü§ñ"
    )

def configure_sidebar():
    st.sidebar.title("‚öôÔ∏è Settings")
    dark_mode = st.sidebar.checkbox("üåô Dark Mode", value=True)
    
    st.sidebar.subheader("üß† AI Configuration")
    provider = st.sidebar.selectbox(
        "Provider",
        ["OpenAI", "DeepSeek"],
        index=0
    )
    
    models = {
        "OpenAI": ["gpt-4-turbo", "gpt-4", "gpt-3.5-turbo"],
        "DeepSeek": ["deepseek-coder"]
    }
    
    model = st.sidebar.selectbox(
        "Model", 
        models[provider],
        index=0
    )
    
    temperature = st.sidebar.slider(
        "Temperature", 
        min_value=0.0, 
        max_value=1.0, 
        value=0.3
    )
    
    st.session_state.setdefault("provider", provider)
    st.session_state.setdefault("model", model)
    st.session_state.setdefault("temperature", temperature)
    
    return dark_mode

def apply_dark_mode(dark_mode):
    if dark_mode:
        st.markdown("""
            <style>
            body { background-color: #121212; color: #e0e0e0; }
            .stTextArea textarea { background-color: #1e1e1e; color: #e0e0e0; }
            .stButton>button { 
                background-color: #6a1b9a; 
                color: white; 
                border-radius: 10px;
                padding: 0.5rem 1rem;
            }
            .stButton>button:hover { 
                background-color: #9c4dcc; 
                box-shadow: 0 0 10px #9c4dcc; 
            }
            .css-1aumxhk { background-color: #1e1e1e; }
            .file-tree { 
                background-color: #1e1e1e; 
                padding: 10px; 
                border-radius: 5px; 
                max-height: 400px; 
                overflow-y: auto;
            }
            </style>
        """, unsafe_allow_html=True)
    else:
        st.markdown("""
            <style>
            body { background-color: #ffffff; color: #000000; }
            .stButton>button { 
                background-color: #4CAF50;
                color: white;
                border-radius: 10px;
                padding: 0.5rem 1rem;
            }
            .stButton>button:hover { 
                background-color: #45a049; 
                box-shadow: 0 0 10px #4CAF50; 
            }
            .file-tree { 
                background-color: #f5f5f5; 
                padding: 10px; 
                border-radius: 5px; 
                max-height: 400px; 
                overflow-y: auto;
            }
            </style>
        """, unsafe_allow_html=True)

def file_or_folder_selector_dialog():
    try:
        root = tk.Tk()
        root.withdraw()
        root.attributes('-topmost', True)
        st.info("üîç Use file dialog to select your file or folder.")
        path = filedialog.askopenfilename(title="Select file") or filedialog.askdirectory(title="Select folder")
        root.destroy()
        return path
    except Exception as e:
        st.error(f"‚ö†Ô∏è File dialog failed: {e}")
        return ""

def perform_upgrade(file_path, upgrade_instruction):
    try:
        files = read_code(file_path)
        if not files:
            st.error("‚ùå No valid files found")
            return None, files
            
        with st.spinner("üß† Applying AI upgrades..."):
            upgraded = upgrade_code(
                files, 
                upgrade_instruction,
                provider=st.session_state.provider,
                model=st.session_state.model,
                temperature=st.session_state.temperature
            )
            if upgraded:
                write_code(upgraded)
                
                # Save project snapshot
                project_hash = save_project_snapshot(file_path, files, upgraded)
                st.session_state["last_project_hash"] = project_hash
                
        return upgraded, files
    except Exception as e:
        st.error(f"‚ö†Ô∏è Upgrade failed: {e}")
        # Attempt self-healing
        with st.spinner("üõ†Ô∏è Attempting self-healing..."):
            try:
                fixed = self_heal_upgrade(file_path, upgrade_instruction, str(e))
                if fixed:
                    st.success("‚úÖ Self-healing successful!")
                    return fixed, files
            except Exception as heal_error:
                st.error(f"‚ùå Self-healing failed: {heal_error}")
        return None, None

def self_heal_upgrade(file_path, upgrade_instruction, error_message):
    """Attempt to automatically fix upgrade errors"""
    try:
        files = read_code(file_path)
        if not files:
            return None
            
        # Create healing prompt
        prompt = f"""
        The following error occurred while trying to upgrade the code:
        {error_message}
        
        Original upgrade instruction:
        {upgrade_instruction}
        
        Please diagnose the issue and provide corrected code.
        """
        
        # Attempt to fix with AI
        fixed = upgrade_code(
            files, 
            prompt,
            provider=st.session_state.provider,
            model=st.session_state.model,
            temperature=0.1  # Low temperature for precise fixes
        )
        
        if fixed:
            write_code(fixed)
            return fixed
    except Exception:
        return None

def display_upgrade_preview(original, upgraded):
    """Show diff between original and upgraded code"""
    for fname, new_content in upgraded.items():
        orig_content = original.get(fname, "")
        
        st.subheader(f"üîß {fname}")
        
        col1, col2 = st.columns(2)
        with col1:
            st.caption("Original")
            st.code(orig_content, language='python')
            
        with col2:
            st.caption("Upgraded")
            st.code(new_content, language='python')
            
        # Log to memory
        try:
            log_memory(orig_content, new_content)
        except Exception as e:
            st.warning(f"üîç Could not log edit: {e}")

def show_project_browser(project_path):
    """Display project directory structure with real-time updates"""
    st.subheader("üåê Project Structure")
    
    if not project_path or not os.path.exists(project_path):
        st.warning("‚ö†Ô∏è Please select a valid project path")
        return
        
    # Scan project directory
    project_tree = scan_project_directory(project_path)
    formatted_tree = format_directory_tree(project_tree)
    
    # Display with expandable sections
    with st.expander("üìÅ Project Tree", expanded=True):
        st.markdown(f"<div class='file-tree'>{formatted_tree}</div>", unsafe_allow_html=True)
    
    # Show file count stats
    file_count = sum(1 for _ in os.walk(project_path))
    st.caption(f"üìä {file_count} files in project")

def show_autocoder_page():
    st.header("‚öôÔ∏è Autocoder Upgrade Tool")
    
    # Path selection
    path_col, btn_col = st.columns([4, 1])
    with path_col:
        file_path = st.text_input(
            "üìÇ Path to file or folder:",
            st.session_state.get("selected_path", "")
        )
    with btn_col:
        st.write("")
        st.write("")
        if st.button("üìÅ Browse"):
            selected_path = file_or_folder_selector_dialog()
            if selected_path:
                st.session_state["selected_path"] = selected_path
                file_path = selected_path
                
    # Show project browser if a directory is selected
    if file_path and os.path.isdir(file_path):
        show_project_browser(file_path)
                
    # Upgrade instruction
    upgrade_options = [
        "Improve readability",
        "Add dark theme",
        "Refactor into functions",
        "Convert to class-based structure",
        "Document with comments",
        "Optimize for performance"
    ]
    
    selected_upgrade = st.selectbox(
        "üí° Suggested Upgrades", 
        upgrade_options
    )
    
    custom_upgrade = st.text_area(
        "üéØ Custom upgrade instruction:", 
        value=selected_upgrade,
        height=100
    )
    
    # Execute upgrade
    if st.button("üöÄ Apply Upgrade", use_container_width=True):
        if not os.getenv("OPENAI_API_KEY") and st.session_state.provider == "OpenAI":
            st.error("‚ùå OPENAI_API_KEY not set in .env file")
        elif not os.getenv("DEEPSEEK_API_KEY") and st.session_state.provider == "DeepSeek":
            st.error("‚ùå DEEPSEEK_API_KEY not set in .env file")
        elif not file_path or not os.path.exists(file_path):
            st.warning("‚ö†Ô∏è Please select a valid file or folder")
        else:
            upgraded, original = perform_upgrade(file_path, custom_upgrade)
            if upgraded:
                st.success("üéâ Upgrade completed successfully!")
                st.balloons()
                
                # Show preview
                with st.expander("üìù Upgrade Preview"):
                    display_upgrade_preview(original, upgraded)
                
                # Record history
                history_entry = {
                    "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
                    "path": file_path,
                    "instruction": custom_upgrade,
                    "files": list(upgraded.keys())
                }
                
                st.session_state.setdefault("edit_history", []).append(history_entry)
                
    # History section
    st.subheader("üìú Edit History")
    if "edit_history" in st.session_state and st.session_state.edit_history:
        for i, entry in enumerate(reversed(st.session_state.edit_history)):
            with st.expander(f"{entry['timestamp']} - {entry['path']}"):
                st.write(f"**Instruction:** {entry['instruction']}")
                st.write(f"**Files modified:** {len(entry['files'])}")
                if st.button(f"View details {i}", key=f"details_{i}"):
                    st.json(entry)
    else:
        st.info("No edit history yet")
        
    # Project memory
    if st.session_state.get("last_project_hash"):
        st.subheader("üíæ Project Memory")
        project_history = get_project_history(st.session_state.last_project_hash)
        if project_history:
            st.write(f"Project snapshots: {len(project_history)}")
            for snapshot in project_history[-3:]:  # Show last 3
                st.caption(f"{snapshot['timestamp']} - {snapshot['operation']}")
        else:
            st.info("No project history recorded")

def enhance_autocoder_ui():
    st.header("üß¨ Enhance the Enhancer (Meta-Upgrades)")
    
    with st.form("enhance_form"):
        file_to_enhance = st.text_input(
            "üìÑ File to Enhance", 
            value="backend/upgrade_project.py"
        )
        
        instruction = st.text_area(
            "üí° Enhancement Prompt", 
            value="Refactor the code, add inline comments, and improve error handling.",
            height=150
        )
        
        submitted = st.form_submit_button("üîß Enhance")
        
    if submitted:
        if not file_to_enhance or not os.path.exists(file_to_enhance):
            st.warning("‚ö†Ô∏è Please enter a valid file path")
        else:
            with st.spinner("üß† Applying meta-upgrades..."):
                result = enhance_enhancer(
                    file_to_enhance, 
                    instruction,
                    provider=st.session_state.provider,
                    model=st.session_state.model,
                    temperature=st.session_state.temperature
                )
                st.success(result)

def main():
    set_page_settings()
    dark_mode = configure_sidebar()
    apply_dark_mode(dark_mode)
    
    # Initialize session state
    st.session_state.setdefault("selected_path", "")
    st.session_state.setdefault("last_project_hash", None)
    
    # Navigation
    st.sidebar.title("üìÇ Navigation")
    page = st.sidebar.radio(
        "Go to",
        ["üß† Autocoder", "üß¨ Enhancer", "üìö Project History", "‚ÑπÔ∏è About"],
        label_visibility="collapsed"
    )
    
    if page == "üß† Autocoder":
        show_autocoder_page()
    elif page == "üß¨ Enhancer":
        enhance_autocoder_ui()
    elif page == "üìö Project History":
        st.title("Project History")
        if st.session_state.get("selected_path"):
            project_history = get_edit_history(st.session_state.selected_path)
            if project_history:
                for entry in project_history:
                    with st.expander(f"{entry['timestamp']} - {entry['file_path']}"):
                        st.code(entry['content'], language='python')
            else:
                st.info("No history for this project")
        else:
            st.info("Select a project to view history")
    elif page == "‚ÑπÔ∏è About":
        st.title("About Autocoder")
        st.markdown("""
        ### AI-Powered Code Enhancement Tool
            
        **Features:**
        - Upgrade existing codebases with AI (OpenAI & DeepSeek)
        - Real-time project directory visualization
        - Project history and memory retention
        - Self-healing error correction
        - Generate new projects from specifications
            
        **How to use:**
        1. Select a file or folder
        2. Choose an upgrade or enter custom instructions
        3. Apply the AI-powered upgrades
        4. Review and commit changes
        """)

if __name__ == "__main__":
    main()